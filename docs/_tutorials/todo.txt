Title: ToDo Module

This will take you through the process of creating a simple ToDo module. This module will provide an interface in the backend that allows users to create new items and check them off as finished. This will not be a very fancy module, it's just intended to get you up and running quickly writing your own modules.



About: The Module's Structure

Lay out the folders for your module.

The first step in creating a new module is to create a home for it. All modules are stored in _bonfire/modules_. This keeps them organized and safe from upgrades.

Create a new folder in _bonfire/modules_ named 'todo'. Inside this new folder, create three new folders: _controllers_, _models_, and _views_. Your folder structure should look like: 

> bonfire/
> 	modules/
>		todo/
>			controllers/
>			models/
>			views/


About: The Data

We will create a migration that will let us easily import our data.

Create a new file under _bonfire/application/db/migrations/_ called *003_Create_todo_table.php*. This will hold the <Migrations> needed to create our new table to hold the todo items. 

Create your migration. The file should look like: 

> <?php if (!defined('BASEPATH')) exit('No direct script access allowed');
>
> class Migration_Create_todo_table extends Migration {
> 
> 	public function up() 
> 	{
> 		$this->dbforge->add_field('todo_id INT(10) NOT NULL AUTO_INCREMENT');
> 		$this->dbforge->add_field('description VARCHAR(255) NOT NULL');
> 		$this->dbforge->add_field('deleted TINYINT(1) DEFAULT 0 NOT NULL');
> 		$this->dbforge->add_key('todo_id', true);
> 		$this->dbforge->create_table('todos');
> 	}
> 	
> 	//--------------------------------------------------------------------
> 	
> 	public function down() 
> 	{
> 		$this->dbforge->drop_table('todos');
> 	}
> 	
> 	//--------------------------------------------------------------------
> 	
> }

Now login to Bonfire and go to Developer / Migrations. It should tell you that the Installed Version is 2, and the Latest Available Version is 3. Click the *Install Latest Version* link. On this new page, choose *Migrate Database* to install the new table.

About: The Model

The model stores all of the functions that you need to access your data in the database. Since Bonfire comes with a base model we can extend, creating a simple model for the Todo module is an easy task. 

Create a new file under _todo/models_ called *todo_model.php*. The file should look like: 

> <?php if (!defined('BASEPATH')) exit('No direct script access allowed');
> 
> class Todo_model extends MY_Model {
> 
> 	protected $table		= 'todos';
> 	protected $key			= 'todo_id';
> 	protected $soft_deletes	= true;
> 	protected $date_format	= 'datetime';
> 	protected $set_created	= false;
> 	protected $set_modified = false;
> 
> }

While not all of these options are needed, I've included them here for clarity. Read more about <MY_Model>.

Basically, this is telling the model:

- Use the table 'todos'.
- Our primary key is 'todo_id'.
- Do not automatically set created_on or modified_on fields.

You can always create new methods, or override the ones provided by <MY_Model> later, but this should do for our needs here.


About: The Admin Pages

The next step is to create the Admin pages that allow you to create new ToDo items. The first step is to create the controller. 

Create a new file in _bonfire/modules/todo/controllers/_ called *content.php*. Create a skeleton controller that extends from Admin_Controller so that any permissions are verified at run time.

> <?php if (!defined('BASEPATH')) exit('No direct script access allowed');
> 
> class Content extends Admin_Controller {
> 
> 	public function __construct() 
> 	{
> 		parent::__construct();
> 		
> 		Template::set('toolbar_title', 'ToDo List');
>
>		$this->load->model('Todo_model', 'todo_model', true);
> 	}
> 	
> 	//--------------------------------------------------------------------
> 	
> }

Now login to Bonfire and click on Content. A new item in sub-menu has shown up, called Todo. Bonfire automatically recognizes that you have a content controller and creates a menu item for it. 

Setting the toolbar_title in the constructor just allows for the white nav-bar to have a consistent name across all pages of this modules. 

We also load the todo model here, so that it's available on every page load.

At this point clicking on the menu item will kick up a 404 error because there is not an index method yet. Let's take care of that now.

Create an index method in the controller.

> 	public function index() 
> 	{
> 		Template::render();
> 	}

The render() methods looks for a view at _modules/todo/views/content/index.php_. Create a simple view file as a placeholder. Put something simple into it, like 'Hello'. Click on the Todo menu item and you should see your new page.



About: The Form

Now let's get our form built to allow creating new Todo items. 

You are free to use any of the form helper functions that you want, but I typically use straight HTML except for the form_open() and form_close() methods. 

> <br/>
> <?php if (auth_errors() || validation_errors()) : ?>
> <div class="notification error">
> 	<?php echo auth_errors() . validation_errors(); ?>
> </div>
> <?php endif; ?>
>
> <?php echo form_open(current_url(), 'style="max-width: 700px"') ?>
> 
> 	<input type="text" name="description" placeholder="What Do You Need To Do?" value="" />
> 	
> 	<div class="submits">
> 		<input type="submit" name="submit" value="Create New Item" />
> 	</div>
> 
> <?php echo form_close(); ?>

Now, in your controller, make some code to handle it. Modify your controller to look like below.

> public function index() 
> 	{
> 		if ($this->input->post('submit'))
> 		{
> 			if ($this->create_item($_POST))
> 			{
> 				Template::set_message('New ToDo item successfully created', 'success');
> 			} 
> 			else
> 			{
> 				Template::set_message('Error creating new ToDo item.', 'error');
> 			}
> 		}
> 	
> 		Template::render();
> 	}
> 	
> 	//--------------------------------------------------------------------
> 	
> 	private function create_item($vars) 
> 	{
> 		$this->form_validation->set_rules('description', 'Description', 'required|trim|strip_tags|max_length[255]|xss_clean');
> 		
> 		if ($this->form_validation->run() !== false)
> 		{
> 			$data = array(
> 				'description'	=> $vars['description']
> 			);
> 		
> 			return $this->todo_model->insert($data);
> 		}
> 		
> 		return false;
> 	}
> 	
> 	//--------------------------------------------------------------------

The index method now checks to see if a form has been submitted. If it has, it runs the _create_item()_ method, which validates the field and creates a new item, if successful. It then prints out a success or error message for the user, using the _Template::set_message()_ method.

*Showing Your Todo Items*

Now, let's modify the index method to actually push the results to the view.

> 	public function index() 
> 	{
> 		if ($this->input->post('submit'))
>		{
>			if ($this->create_item($_POST))
>			{
>				Template::set_message('New ToDo item successfully created', 'success');
>			} 
>			else
>			{
>				Template::set_message('Error creating new ToDo item.', 'error');
>			}
>		}
>		
>		Template::set('items', $this->todo_model->order_by('todo_id', 'desc')->find_all_by('deleted', 0));
>	
>		Template::render();
> 	}

The only new command here is the _Template::set()_ method, which simply makes a variable name _$items_ available in the view. 

If you look at the call to todo_model, you will see that we are using method chaining and a helper method that's built into the MY_Model class, _order_by()_. The MY_Model class provides a number of helper functions designed to be used just like this that make getting just the right results much easier. 

Now, head over to the view, and add this code at the bottom of the file.

> <?php if (isset($items) && is_array($items) && count($items)) : ?>
> <h3>ToDo Items</h3>
> 
> <?php echo form_open(current_url() .'/delete', 'class="ajax-form todo-form"'); ?>
> <table>
> 	<tbody>
> 	<?php foreach ($items as $item) : ?>
> 		<tr>
> 			<td style="width: 1em; text-align: center">
> 				<input type="checkbox" name="items[]" value="1" data-id="<?php echo $item->todo_id ?>" />
> 			</td>
> 			<td><?php echo $item->description ?></td>
> 		</tr>
> 	<?php endforeach; ?>
> 	</tbody>
> </table>
> <?php echo form_close(); ?>
> 
> <?php endif; ?>

This creates a listing of all of the Todo items that still need to be done, along with a checkbox next to each to allow us to mark them as completed.



About: Deleting Items

The next thing we need to do is make the items actually able to be deleted. We will do this with a little bit of jQuery ajax magic.

If you will notice the form_open() call above, we are assigning a class of _ajax_form_ to the class. This tells Bonfire that this form should be submitted via AJAX. The url will be pulled from the form open tag, and all of the checked items will be serialized and sent as POST vars to the url. 

At the bottom of your view, add the following javascript.


> <script>
> head.ready(function() {
> 	$('.todo-form input[type=checkbox]').change(function() {
> 		var cid = $(this).attr('data-id');
> 		
> 		// Remove it from the display, with a fade effect
> 		$(this).parents('tr').fadeOut(300);
> 		
> 		// Tell the server to remove it.
> 		$.post('<?php echo current_url();?>/delete/'+ cid);
> 	});
> });
> </script>

This javascript simply watches each checkbox in the _task-form_ for a click. It then fades the table row out and calls a function in the server that deletes it. For this example, we're not dealing with errors and success messages, but in a production app, you'd probably want to do that.

Now we need to create the _delete()_ method, so open up the content.php controller and add the following method.

> public function delete() 
> 	{
> 		$id = $this->uri->segment(5);
> 		
> 		$this->todo_model->delete($id);
> 		
> 		echo 'true';
> 		die();
> 	}

This simply grabs the id of the task to delete and deletes it. If you remember in the model, we set _soft_deletes_ to true. This tells MY_Model to simply change the record's delete column to a '1' instead of the default '0'. That way, the records are still there. If _soft_deletes_ was false, the record would actually be deleted from the database.

And there you have it! A basic Todo manager. Using the knowledge you have developed, you should be able to jump in and start working on your own sites.

Happy coding!