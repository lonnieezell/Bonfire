Title: Unit Testing

Bonfire provides a Unit Testing framework that allows you to test Models, Libraries and Helpers. It extends the CodeIgniter Unit_Test class and was inspired by <FuelCMS at http://www.getfuelcms.com>, <SimpleTest at http://www.simpletest.org>, and <Toast at http://jensroland.com/projects/toast/>.

Available since: Version 0.2

About: Setting Up Testing for Your Module

Unit Testing is done on a per-module basis, that allows you run tests for your entire module at once. 

All test classes must be placed in a tests folder in your module. This should sit right next to the controllers, models, and views folders.

>+ my_module/
>  + controllers
>  + models
>  + tests
>  + views

Tests are run through classes that extend the Unit_Tester class. Each file must be named the same as the class itself, so the *Assets_test* class must be in a file named *tests/Assets_test.php*.

> class Assets_test extends Unit_Tester {
>    . . .
> }



About: Creating Tests

Once you have created the class file, creating individual tests is as simple as creating a new method in that class that starts with *test_* and contains one of the assertions (see below).

>	public function test_css_with_string_passed_no_extension() 
>	{
>		$r = Assets::css('screen');
>		$this->assert_is_type($r, 'string', 'Value = "'. htmlentities($r) .'"');
>	}

Two empty methods exist that allow you to perform setup and maintenance before and after each test. These are *pre()* and *post()*.

>	public function pre() 
>	{
>		if (!class_exists('Assets'))
>		{
>			$this->load->library('Assets');
>		}
>	}



About: Running Tests

Every effort has been made to make the results from test as easy to understand, and user-friendly as possible.

1) To run tests in Bonfire, navigate to Developer / Tester.

2) Choose the module or modules that you want to run tests for. 

3) Click 'Run Tests'.


About: Available Assertions

Unit Testing uses similar assertion methods to those provided by <SimpleTest at http://www.simpletest.org>.

Each assertion has a default message that it will display, but you can provide an optional message to each test by passing a string as the last parameter. This message be added to the end of the default message.

assert_true($x) 				- Fails unless $x evaluates TRUE.

assert_false($x)				- Fails unless $x evaluates FALSE.

assert_equals($x, $y)			- Fails unless $x == $y.

assert_not_equals($x, $y)		- Fails unless $x != $y.

assert_empty($x)				- Fails unless $x evaluates as is_empty().

assert_not_empty($x)			- Fails unless $x evaluates as NOT is_empty().

assert_null($x)					- Fails unless $x is NULL.

assert_not_null($x)				- Fails unless $x is not NULL.

assert_identical($x, $y)		- Fails unless $x === $y.

assert_not_identical($x, $y)	- Fails unless $x !== $y.

assert_is_type($x, 'type')		- Fails unless $x is of the type described in the second parameter. Available types are: NULL, Boolean, String, Integer, Float, Array, Resource, Object.

assert_not_is_type($x, 'type')	- Fails unless $x is NOT of the type described in the second parameter.

