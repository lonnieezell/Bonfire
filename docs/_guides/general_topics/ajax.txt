Title: AJAX in Bonfire

First off, Bonfire loves <jQuery at http://jquery.com>. All of the enhanced admin functionality is provided by jQuery or some jQuery plugins. For front-end development, use whatever framework makes you happy, though more and more functionality will be built in later releases for front-end stuff using jQuery and it's friends. 

For admin features, we have included a couple of plugins that work automatically to help speed up your development. 


About: Admin Forms

When you want to submit a form via AJAX, it's as simple as adding the _ajax-form_ class to your form.

> <?php echo form_open(current_url(), 'class="ajax-form"'); ?>

When this form is submitted, it will submit the form to the current url and display the results in the current page via AJAX. No work needed. This works especially well with _master/detail_ pages, like those used by the _users_ and _roles_ modules. 



About: Links

Whenever you have a link that you want to AJAX-ify, simply add the _ajaxify_ class to the link. Here is an example from the _Roles_ index page.

> <div class="box create rounded">
> 	<a class="button good ajaxify" href="<?php echo site_url(SITE_AREA .'/settings/roles/create'); ?>"><?php echo lang('role_create_button'); ?></a>
> 
> 	<h3><?php echo ucwords(lang('role_create_button')); ?></h3>
> 	
> 	<p><?php echo lang('role_create_note'); ?></p>
> </div>

When the button/link is clicked, the browser sends a request to _/admin/settings/roles/create_ and displays the resulting page inside a div on the page called _ajax-content_, replacing any content that is already there.

> <div id="ajax-content"> ... </div>



About: Templates

When Bonfire recognizes an AJAX call, any time that you use the _Template::render()_ method, your default layout will be overridden by a layout named '_ajax.php'. (The view name can be changed in the _config/application.php_ config file.) Any changes, such as firing certain events on page load, can be done in this template, after the _Template::yield()_ method.