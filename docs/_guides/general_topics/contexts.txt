Title: Contexts Overview

Contexts make organizing your code and your admin UI a simple, consistent affair. 


About: What are Contexts?

A *Context* is an area of similar responsibility within the code and/or UI. An area in the UI that shows all module's settings to be maintained is one Context. Another one might allow you to maintain the latest news stories for a newspaper. 

(see contexts.png)

The icons in the picture above represent each individual Context. Each module that has any functionality declared for that context will show up in the sub-navigation below. In this case, _Database_ and _Emailer_ are both modules with Settings contexts.




About: Contexts in Your Modules

In your module, contexts are represented by their own controller. It must have the same name as the context to be recognized.

(see module_contexts.png)

In this picture, the _content.php_ controller provides the code for the Todo module's _Content Context_. 

The views for each context must come from a subfolder with the context's name. So any views used by the Content context should be under *your_module/views/content/view.php*.

(see context_views_folders.png)




About: The Public Context

Every module can create a _Public Context_ by simply creating a controller whose name is the same as the module. A Public Context is simply any functionality designed for the front-end, publicly-accessible portion of your web application.

This file would then be available via the URL 

> http://yoursite.com/module_name

All views are stored directly in the views folder, not within any sub-folders.

(see public_context_structure.png)




About: Required Contexts

Bonfire requires only two contexts to exist, and will create them if they don't. They are...

	Settings	- Any settings related to your module. These are typically items that are infrequently changed, like the number of events to show on each page, etc.
	Developer	- This context is meant for tools designed to make the application developer's life easier and may include database tools, code generation, deploy helpers, etc.




About: Custom Contexts

You can create any number of contexts to fit your application's specific needs. Doing so is a very simple task that only consists of 3 steps. 

*1. Update the Application Config Array*

In _bonfire/application/config/application.php_, add your new context to the array. The order that the items appear in the array is the same order they will display in the admin UI.

> $config['contexts'] = array( 'foo', 'settings', 'developer' );



*2. Update the Language File*

In _bonfire/application/language/english/application_lang.php_, edit the language strings to match your contexts. They should follow the format *bf_context_foo*, where _foo_ is the name of your context. This allows you to localize the UI completely, while also providing the ability to have multiple words for the Context name. 

> //--------------------------------------------------------------------
> // Contexts
> //--------------------------------------------------------------------
> $lang['bf_no_contexts']		= 'The contexts array is not properly setup. Check your application config file.';
> $lang['bf_context_foo']		= 'Foo Module';
> $lang['bf_context_settings']	= 'Settings';
> $lang['bf_context_developer']	= 'Developer';

*3. Create the icon*

Each context should have an icon to represent it in the UI.

- Should be in _.png_ format.
- Should be named in the format _context_foo.png_, where _foo_ is the name of the context.
- Should be 24px x 24x in size.
- Should be copied to the *bonfire/themes/admin/images/* folder.

At this point, things should take care of themselves. 