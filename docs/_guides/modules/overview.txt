Title: Modules Overview

About: What Are Modules?

At it's heart, Bonfire is nothing more than a pretty interface that can communicate with modules in a pre-determined way. Almost all of your web application will be creating new modules.

Modules are groups of code that work together for a common purpose, containing models, views, controllers, libraries, and most any other type of file that CodeIgniter understands. Modules are possible through the use of <WireDesignz' at http://codeigniter.com/forums/member/45875/> <Modular Extensions HMVC at https://bitbucket.org/wiredesignz/codeigniter-modular-extensions-hmvc/wiki/Home>, and support the full HMVC pattern. These files should all focus on a single topic, like an event calendar, pages, a blog system, newsletter, etc.


About: Contexts

In Bonfire, there are 6 distinct contexts that help to separate the logic of your modules' controllers into tight compartments. The Contexts are... 

	Content		- Any functions relating to creating or changing something that would be considered 'site content'. This might include pages, snippets of code, events, newsletters, galleries and more.
	Statistics	- Should provide reporting functions related to your application.
	Appearance	- Anything to do with how the module appears within the public-facing site. This is usually for customizing the CSS of the module, or similar functions. If all your module needs is a few settings, these should go in...
	Settings	- Any settings related to your module. These are typically items to are infrequently changed, like the number of events to show on per page, etc.
	Developer	- This context is meant for tools designed to make the application developer's life easier and may include database tools, code generation, deploy helpers, etc.
	Public		- This is a general category for any controllers that will directly show information to the public.
	
With the exception of the Public context, creating a controller for your module for a specific controller is a simple as naming your controller to match the context. A controller for the _content_ context, would be named *content.php*, while one that shows up in the _settings_ context would be named *setting.php*. For the public context, the controller should be named the same as the module. For example, a  _Pages_ module would have a public controller called *pages.php*.

Each module will automatically show up in the appropriate area of the Admin UI. Again, with the exception of public contexts, which are only available to the public-facing site.



About: Creating New Modules

To add new functionality to your site, you will generally be creating a new module. This is as simple as: 

- Create a new folder under bonfire/modules. 
- Inside that folder, create new folders for controllers, models, views, etc.
- Create your controllers and views (and any other files that you might need, like language files, config files, etc.).

Your controllers should extend one of the 4 main Controllers, though you will typically be extending the Front_Controller, the Authenticated_Controller, or the Admin_Controller. You can learn more about the types of controllers in the <Base_Controller> documentation.


About: Module Config Files

While not necessary, modules can have a _config.php_ file to enhance the way their module is displayed throughout the system. The format of the file is...

>	$config['module_config'] = array(
>		'name'			=> 'Blog', 			// The name that is displayed in the UI
>		'description'	=> 'Simple Blog',	// May appear at various places within the UI
>		'author'		=> 'Your Name',		// The name of the module's author
>		'homepage'		=> 'http://...',	// The module's home on the web
>		'version'		=> '1.0.1',			// Currently installed version
>		'menu'			=> array(			// A view file containing an <ul> that will be the sub-menu in the main nav.
>			'context'	=> 'path/to/view'
>		)
>	);


About: Mastering Modules

To learn more about working with modules, you can:

- Browse the <Modular Extensions HMVC at https://bitbucket.org/wiredesignz/codeigniter-modular-extensions-hmvc/wiki/Home> instructions.
- Follow along with the <ToDo Module> tutorial.